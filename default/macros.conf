[check_rest_api]
definition = makeresults | appendcols [ | `meta_query("version()")` | head 1 | fields result ] | eval user=`oi_user`, host=`oi_host`, port=`oi_port`, msg="Using user \"".user."\" for Rest API server \"".host.":".port."\" version ".result, msg=if(result=="","Rest API server \"".host."\" not responding/missing.",msg), msg=if(user=="","Rest API user missing. Remember to update passwords.conf as well.",msg), msg=if(host=="","Rest API host missing. Remember to check if oi_port is correct as well.",msg)
iseval = 0

[compile_query(5)]
args = query,and,query1,stats_op,by
definition = `format_query("$query$","$and$","$query1$","$stats_op$","$by$")` | map search="| makeresults | `rest_query(\"$intent$\",\"nat1\")`"
iseval = 0

[format_query(5)]
args = query,and,query1,stats_op,by
definition = makeresults | eval and=case(isnull("$and$"),"","$and$"=="-","",1=1,"$and$"), stats_op=case(isnull("$stats_op$"),"","$stats_op$"=="-","",1=1,"$stats_op$"), \
by=case(isnull("$by$"),"","$by$"=="-","",1=1,"$by$"), \
intent=if(and=="","$query$","$query$ ".and." $query1$"), intent=case(stats_op=="",intent,by==""," ".stats_op." ".intent,1=1," ".stats_op." ".intent." by $by$")
iseval = 0

[meta_query(1)]
args = query
definition = makeresults | `rest_query("$query$","meta_query_response")`
iseval = 0

[meta_query(4)]
args = uri, user, pass, query
definition = eval header="{\"content-type\":\"application/json\"}", data="{\"query\":\"$query$\"}" | curl method=get uri="$uri$" user="$user$" pass="$pass$"  debug=true headerfield=header datafield=data
iseval = 0
disabled = 0

[oi_host]
iseval = 0
definition = "localhost"

[oi_port]
definition = "10000"
iseval = 0

[oi_user]
definition = ""
iseval = 0

[oi_pass]
definition = ""
iseval = 0

[process_old_search]
definition = search index=_audit app="openintelligence_nli_app", provenance="UI:Dashboard:*", mode="historical" "eval m111=111" NOT "8765=6789" NOT "$row"  | eval search=ltrim(search,"'"), search=rtrim(search,"'"),search1=split(search,"| eval m111=111,"), splquery=mvindex(search1,0), search1=mvindex(search1,1),search1="{ ".search1."}", search1=replace(search1,"=",":") |  spath input=search1 | eval entity=if(entity=="","eventRoot",entity),visualisePage=if(stats_op=="-","visualise_search","visualise_stats"),normalsplquery=replace(splquery,"\"","___")
iseval = 0

[process_query(1)]
args = intent
definition = makeresults | `rest_query("$intent$","nat1")`  | `process_result`
iseval = 0

[process_query(5)]
args = query,and,query1,stats_op,by
definition = `compile_query("$query$","$and$","$query1$","$stats_op$","$by$")` | `process_result`
iseval = 0

[process_result]
definition = eval status=case(curl_status=="408","No connection could be made because the target machine actively refused it",isnull(splquery),"Could not understand: ".data,type=="error","Could not understand: ".data,others!="",others,isnull(status),"OK",status=="","OK",1=1,status),stats_op=case(isnull(stats_op),"-",stats_op=="","-",1=1,stats_op), \
by=case(isnull(by),"eventRoot",by=="","eventRoot",1=1,by), caveats=if(match(splquery,"\sdatamodel[\s\=]"),"Results would be faster if Model ".event." is accelerated",""),len=len(splquery),"Refine Query"=if(len>0,"CLICK HERE",""), "Visualise Query"=if(len>0,"CLICK HERE",""),entity=if(entity=="","eventRoot",entity),visualisePage=if(stats_op=="-","visualise_search","visualise_stats"),normalsplquery=replace(splquery,"\"","___")  | fillnull value="" adjective entity adverb event
iseval = 0

[rest_query(2)]
args = query,query_type
definition = eval user=`oi_user`,pass=`oi_pass`,host=`oi_host`,port=`oi_port`,uri="https://".host.":".port."/rest/$query_type$", meta_query="$query$" | eval result=splquery\
| map search="|  makeresults | `meta_query("$uri$","$user$","$pass$","$meta_query$")` | fields - _time " | spath input=curl_message path=result{} \
|  rename "result{}" as result\
|  mvexpand result\
|  spath input=result \
|  rename result.* AS *
iseval = 0

[sync_cached_event]
definition = `meta_query("eventFull()")` \
|  eval result=split(result,"#"),entity=mvindex(result,0), event=mvindex(result,1) \
| table entity, event

[sync_cached_entity]
definition = `meta_query("entityFull()")` | eval result=split(result,"#"),entity=mvindex(result,0), type=mvindex(result,1), mapping=mvindex(result,2) | fields entity, type, mapping

# 
# IndexForEvent 
#
[account_change_indexes]
definition = index=*
iseval = 0

[alert_indexes]
definition = index=*
iseval = 0

[application_indexes]
definition = index=*
iseval = 0

[applocker_indexes]
definition =index="windows"
iseval = 0

[audittrail_indexes]
definition = (index=* OR index=_*)
iseval = 0

[authentication_indexes]
definition = (index=* OR index=_*)
iseval = 0

[certificate_generation_indexes]
definition = index=*
iseval = 0

[change_indexes]
definition = (index=* OR index=_*)
iseval = 0

[cpu_event_indexes]
definition = (index=* OR index=_*)
iseval = 0

[data_exfiltration_attempt_indexes]
definition = index=*
iseval = 0

[database_indexes]
definition = index=*
iseval = 0

[discovery_indexes]
definition = index=*
iseval = 0

[email_event_indexes]
definition = index=*
iseval = 0

[facilities_indexes]
definition = index=*
iseval = 0

[filesystem_indexes]
definition = (index=* OR index=_*)
iseval = 0

[intrusion_detection_indexes]
definition = index=*
iseval = 0

[jvm_event_indexes]
definition = index=*
iseval = 0

[malware_infection_indexes]
definition = index=*
iseval = 0

[malware_remediation_attempt_indexes]
definition = index=*
iseval = 0

[memory_event_indexes]
definition = (index=* OR index=_*)
iseval = 0

[message_reception_indexes]
definition = index=*
iseval = 0

[multi_factor_authentication_indexes]
definition = index=*
iseval = 0

[nessus_plugin_indexes]
definition = index=*
iseval = 0

[network_event_indexes]
definition = index=*
iseval = 0

[network_request_indexes]
definition = index=*
iseval = 0

[network_resolution_indexes]
definition = index=*
iseval = 0

[network_session_indexes]
definition = index=*
iseval = 0

[os_indexes]
definition = (index=* OR index=_*)
iseval = 0

[patch_indexes]
definition = index=*
iseval = 0

[performance_indexes]
definition = (index=* OR index=_*)
iseval = 0

[port_indexes]
definition = (index=* OR index=_*)
iseval = 0

[registry_event_indexes]
definition = index=*
iseval = 0

[registry_state_indexes]
definition = index=*
iseval = 0

[service_event_indexes]
definition = index=*
iseval = 0

[service_request_indexes]
definition = index=*
iseval = 0

[splunk_audit_activity_indexes]
definition = (index=* OR index=_*)
iseval = 0

[splunk_audit_modular_action_indexes]
definition = (index=* OR index=_*)
iseval = 0

[splunk_ui_access_indexes]
definition = (index=* OR index=_*)
iseval = 0

[storage_event_indexes]
definition =index="_internal"
iseval = 0

[tenable_plugin_indexes]
definition =index="_internal"
iseval = 0

[vulnerability_indexes]
definition =index="_internal"
iseval = 0

[web_request_indexes]
definition =index="_internal"
iseval = 0

[windows_event_indexes]
definition =index="windows"
iseval = 0

[windows_process_executable_indexes]
definition =index="windows"
iseval = 0

[windows_update_indexes]
definition =index="windows"
iseval = 0

[vulnerability_indexes]
definition =index="windows"
iseval = 0



