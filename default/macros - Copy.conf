[check_rest_api]
definition = makeresults | appendcols [ | `meta_query("version()")` | head 1 | fields result ] | eval user=`oi_user`, host=`oi_host`, msg="Using user \"".user."\" for Rest API server \"".host."\" version ".result." (click here to change these settings)", msg=if(isnull(result),"Rest API server \"".host."\" not responding/missing (click here to configure Rest API settings)",msg), msg=if(user=="","Rest API user missing (click here for updating the oi_user macro). Remember to update passwords.conf as well.",msg), msg=if(host=="","Rest API host missing (click here for updating the oi_host macro). Remember to check if oi_port is correct as well.",msg), reset=if(user=="","","Reset the form before start building a new query (click here to reset)")
iseval = 0

[clean(2)]
args = article,entity
definition = makeresults | \
eval article="$article$",\
     article=replace(article,"any,",""), \
     article=replace(article,",any",""), \
     article=replace(article,"all",""), \
     article=replace(article,"all,",""),\
     article=replace(article,",all",""),\
     entity="$entity$"
iseval = 0

[clean(4)]
args = article,entity,adverb,relationEntity
definition = makeresults |\
eval article="$article$",\
     article=replace(article,"any,",""), \
     article=replace(article,",any",""), \
     article=replace(article,"all","known"), \
     article=replace(article,"all,","known,"),\
     article=replace(article,",all",",known"),\
     entity="$entity$",\
     adverb="$adverb$",\
     adverb=replace(adverb,"any,",""),\
     adverb=replace(adverb,"any ,",""), \
     adverb=replace(adverb,"any",""),\
     relationEntity="$relationEntity$",\
     relationEntity=replace(relationEntity," event","")
iseval = 0

[clean1(4)]
args = article1,entity1,adverb1,relationEntity1
definition = eval article1="$article1$",\
     article1=replace(article1,"any,","the associated "), \
     article1=replace(article1,"any","the associated "), \
     article1=replace(article1,",any",""), \
     article1=replace(article1,"all","known"), \
     article1=replace(article1,"all,","known,"),\
     article1=replace(article1,",all",",known"),\
     entity1="$entity1$",\
     adverb1="$adverb1$",\
     adverb1=replace(adverb1,"any,",""),\
     adverb1=replace(adverb1,"any ,",""), \
     adverb1=replace(adverb1,"any",""),\
     relationEntity1="$relationEntity1$",\
     relationEntity1=replace(relationEntity1," event","")
iseval = 0

[compile_query(1)]
args = query
definition = makeresults |`rest_query("$query$","nat1")` | eval splquery=replace(result,"\| head 10",""), splquery=replace(splquery,"\| eventcount \| rename count as errorMessage \| eval errorMessage\=","")
iseval = 0

[rest_query(2)]
args = query,query_type
definition = eval user=`oi_user`,host=`oi_host`,port=`oi_port`,uri="https://".host.":".port."/rest/$query_type$", meta_query="$query$"\
| map search="|  makeresults | `curl_meta_query("$uri$","$user$","$meta_query$")` | fields - _time " | spath input=curl_message | rename "result{}" AS results | mvexpand "results" | eval results=split(results,"#"), result0=mvindex(results,0), result=if(isnull(result0),result,result0), status=if(type="delayed","OK",type) |  fields type, result, results, status
iseval = 0

[oi_host]
iseval = 0
definition = ""

[oi_port]
definition = "10000"
iseval = 0

[oi_user]
definition = ""
iseval = 0

[meta_query(1)]
args = query
definition = makeresults | `rest_query("$query$","meta_query_response")`
iseval = 0

[format_query_one_event(4)]
args = article, entity, adverb, relationEntity
definition = `clean("$article$","$entity$","$adverb$","$relationEntity$")`\
| eval NLquery=article." ".entity." with ".adverb." ".relationEntity." event", NLquery=replace(NLquery,"any event with ","")
iseval = 0

[query_no_repeat(10)]
args = article, entity, adverb, relationEntity, and_nl, article1, entity1, adverb1, relationEntity1, before_tk
definition = `clean("$article$","$entity$","$adverb$","$relationEntity$")`\
| `clean1("$article1$","$entity1$","$adverb1$","$relationEntity1$")`\
| eval and_nl="$and_nl$",\
       NLquery=article." ".entity." with ".adverb." ".relationEntity." event ".and_nl." ".article1." ".entity1." had a ".adverb1." ".relationEntity1." event", NLquery=replace(NLquery,"any event with ","")\
 | map search=" | `compile_query($NLquery$)` | eval NLquery=$NLquery$ "
iseval = 0

[query_repeat(10)]
args = article, entity, adverb, relationEntity, and_nl, article1, entity1, adverb1, relationEntity1, before_tk
definition = `clean("$article$","$entity$","$adverb$","$relationEntity$")`\
| `clean1("$article1$","$entity1$","$adverb1$","$relationEntity1$")`\
| eval and_nl="$and_nl$",\
       NLquery=article." ".entity." with ".adverb." ".relationEntity." event ".and_nl." ".article1." ".entity1." together with this ".entity." had ".adverb1." ".relationEntity1." event", NLquery=replace(NLquery,"any event with ","")\
| map search=" | `compile_query($NLquery$)` | eval NLquery=$NLquery$ "
iseval = 0

[query_one_event_stats(6)]
args = article, entity, adverb, relationEntity,stats_op,by
definition = `format_query_one_event("$article$","$entity$","$adverb$","$relationEntity$")` \
| eval NLquery="$stats_op$ ".NLquery." by $by$"  \
| map search=" | `compile_query($NLquery$)` | eval NLquery=$NLquery$ "
iseval = 0

[query_one_entity(2)]
args = article, entity
definition = `clean("$article$","$entity$")` | eval NLquery=if(article=="any","any ".entity,"known ".article." ".entity)  | map search=" | `compile_query($NLquery$)` | eval NLquery=$NLquery$ "
iseval = 0

[query_one_event(4)]
args = article, entity, adverb, relationEntity
definition = `format_query_one_event("$article$","$entity$","$adverb$","$relationEntity$")`\
| map search=" | `compile_query($NLquery$)` | eval NLquery=$NLquery$ "
iseval = 0

[sync_cached_entity]
definition = `meta_query("entityFull()")` | eval entity=mvindex(results,0), type=mvindex(results,1), mapping=mvindex(results,2) | fields entity, type, mapping
iseval = 0

[sync_cached_event]
definition = `meta_query("eventFull()")` | eval entity=mvindex(results,0), event=mvindex(results,1) | fields entity, event
iseval = 0

[curl_meta_query(3)]
args = uri, user, query
definition = eval header="{\"content-type\":\"application/json\"}", data="{\"query\":\"$query$\"}" | curl method=get uri="$uri$" splunkpasswdname="$user$" splunkpasswdcontext="openintelligence_nli_app"  debug=true headerfield=header datafield=data
iseval = 0
